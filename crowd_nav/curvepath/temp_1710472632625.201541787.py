# -*- coding: utf-8 -*-
"""Script

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E3XZ6GUXeTlqpc9WMQ9bcN0kE_MDfA2n
"""

import re
from collections import defaultdict

def calculate_weighted_average(values):
    total = sum(values)
    average = total / len(values)
    return average

file_path = 'output.log'

env_values_latest_file = defaultdict(lambda: defaultdict(list))

pattern = r' ([^:]+): ([-+]?\d+\.\d+)' 

with open(file_path, 'r') as file:
    current_env_latest_file = None
    file_iterator = iter(file)
    next(file_iterator) #First line

    for line in file:
        env_match_latest = re.search(r"simulation environment: (\w+)", line)
        if env_match_latest:
            current_env_latest_file = env_match_latest.group(1)

        if current_env_latest_file:
            try:
                for match in re.finditer(pattern, next(file_iterator)):
                    key, value = match.groups()
                    if key in ['Success! Total Reward', 'Collision! Total Reward', 'Timeout! Total Reward', 'Collision Wall! Total Reward']:
                        key = 'Total_Reward'
                    env_values_latest_file[current_env_latest_file][key].append(float(value))

            except StopIteration:
                pass
        
        current_env_latest_file = None

#print(env_values_latest_file.items())

combined_averages_latest = {'Dynamic': defaultdict(list), 'Mixed': defaultdict(list), 'Static': defaultdict(list), 'No': defaultdict(list)}
dynamic_envs = ['circle_crossing', 'square_crossing']
mixed_envs = ['circle_static', 'square_static']
static_envs = ['static']
no_envs = ['no']

for env, metrics in env_values_latest_file.items():
    if env in dynamic_envs:
        category = 'Dynamic'
    elif env in mixed_envs:
        category = 'Mixed'
    elif env in static_envs:
        category = 'Static'
    else:
        category = env.capitalize()

    for key, values in metrics.items():
        combined_averages_latest[category][key].extend(values)

final_averages_combined_latest = {
    category: {key: calculate_weighted_average(values) for key, values in metrics.items()}
    for category, metrics in combined_averages_latest.items()
}

print(final_averages_combined_latest)